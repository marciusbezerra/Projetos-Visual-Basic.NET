'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsClientes
    Inherits DataSet
    
    Private tableClientes As ClientesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                Me.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clientes As ClientesDataTable
        Get
            Return Me.tableClientes
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsClientes = CType(MyBase.Clone,dsClientes)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Clientes")) Is Nothing) Then
            Me.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableClientes = CType(Me.Tables("Clientes"),ClientesDataTable)
        If (Not (Me.tableClientes) Is Nothing) Then
            Me.tableClientes.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsClientes"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsClientes.xsd"
        Me.Locale = New System.Globalization.CultureInfo("pt-BR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableClientes = New ClientesDataTable
        Me.Tables.Add(Me.tableClientes)
    End Sub
    
    Private Function ShouldSerializeClientes() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCargoDoContato As DataColumn
        
        Private columnCEP As DataColumn
        
        Private columnCidade As DataColumn
        
        Private columnCódigoDoCliente As DataColumn
        
        Private columnEndereço As DataColumn
        
        Private columnFax As DataColumn
        
        Private columnNomeDaEmpresa As DataColumn
        
        Private columnNomeDoContato As DataColumn
        
        Private columnPaís As DataColumn
        
        Private columnRegião As DataColumn
        
        Private columnTelefone As DataColumn
        
        Friend Sub New()
            MyBase.New("Clientes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CargoDoContatoColumn As DataColumn
            Get
                Return Me.columnCargoDoContato
            End Get
        End Property
        
        Friend ReadOnly Property CEPColumn As DataColumn
            Get
                Return Me.columnCEP
            End Get
        End Property
        
        Friend ReadOnly Property CidadeColumn As DataColumn
            Get
                Return Me.columnCidade
            End Get
        End Property
        
        Friend ReadOnly Property CódigoDoClienteColumn As DataColumn
            Get
                Return Me.columnCódigoDoCliente
            End Get
        End Property
        
        Friend ReadOnly Property EndereçoColumn As DataColumn
            Get
                Return Me.columnEndereço
            End Get
        End Property
        
        Friend ReadOnly Property FaxColumn As DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        Friend ReadOnly Property NomeDaEmpresaColumn As DataColumn
            Get
                Return Me.columnNomeDaEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property NomeDoContatoColumn As DataColumn
            Get
                Return Me.columnNomeDoContato
            End Get
        End Property
        
        Friend ReadOnly Property PaísColumn As DataColumn
            Get
                Return Me.columnPaís
            End Get
        End Property
        
        Friend ReadOnly Property RegiãoColumn As DataColumn
            Get
                Return Me.columnRegião
            End Get
        End Property
        
        Friend ReadOnly Property TelefoneColumn As DataColumn
            Get
                Return Me.columnTelefone
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow
            Get
                Return CType(Me.Rows(index),ClientesRow)
            End Get
        End Property
        
        Public Event ClientesRowChanged As ClientesRowChangeEventHandler
        
        Public Event ClientesRowChanging As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleted As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleting As ClientesRowChangeEventHandler
        
        Public Overloads Sub AddClientesRow(ByVal row As ClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClientesRow(ByVal CargoDoContato As String, ByVal CEP As String, ByVal Cidade As String, ByVal CódigoDoCliente As String, ByVal Endereço As String, ByVal Fax As String, ByVal NomeDaEmpresa As String, ByVal NomeDoContato As String, ByVal País As String, ByVal Região As String, ByVal Telefone As String) As ClientesRow
            Dim rowClientesRow As ClientesRow = CType(Me.NewRow,ClientesRow)
            rowClientesRow.ItemArray = New Object() {CargoDoContato, CEP, Cidade, CódigoDoCliente, Endereço, Fax, NomeDaEmpresa, NomeDoContato, País, Região, Telefone}
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        
        Public Function FindByCódigoDoCliente(ByVal CódigoDoCliente As String) As ClientesRow
            Return CType(Me.Rows.Find(New Object() {CódigoDoCliente}),ClientesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClientesDataTable = CType(MyBase.Clone,ClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClientesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCargoDoContato = Me.Columns("CargoDoContato")
            Me.columnCEP = Me.Columns("CEP")
            Me.columnCidade = Me.Columns("Cidade")
            Me.columnCódigoDoCliente = Me.Columns("CódigoDoCliente")
            Me.columnEndereço = Me.Columns("Endereço")
            Me.columnFax = Me.Columns("Fax")
            Me.columnNomeDaEmpresa = Me.Columns("NomeDaEmpresa")
            Me.columnNomeDoContato = Me.Columns("NomeDoContato")
            Me.columnPaís = Me.Columns("País")
            Me.columnRegião = Me.Columns("Região")
            Me.columnTelefone = Me.Columns("Telefone")
        End Sub
        
        Private Sub InitClass()
            Me.columnCargoDoContato = New DataColumn("CargoDoContato", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCargoDoContato)
            Me.columnCEP = New DataColumn("CEP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEP)
            Me.columnCidade = New DataColumn("Cidade", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCidade)
            Me.columnCódigoDoCliente = New DataColumn("CódigoDoCliente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCódigoDoCliente)
            Me.columnEndereço = New DataColumn("Endereço", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndereço)
            Me.columnFax = New DataColumn("Fax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax)
            Me.columnNomeDaEmpresa = New DataColumn("NomeDaEmpresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNomeDaEmpresa)
            Me.columnNomeDoContato = New DataColumn("NomeDoContato", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNomeDoContato)
            Me.columnPaís = New DataColumn("País", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaís)
            Me.columnRegião = New DataColumn("Região", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegião)
            Me.columnTelefone = New DataColumn("Telefone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefone)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCódigoDoCliente}, true))
            Me.columnCódigoDoCliente.AllowDBNull = false
            Me.columnCódigoDoCliente.Unique = true
        End Sub
        
        Public Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClientesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClientesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanged(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanging(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleted(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleting(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClientesRow(ByVal row As ClientesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientesRow
        Inherits DataRow
        
        Private tableClientes As ClientesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientes = CType(Me.Table,ClientesDataTable)
        End Sub
        
        Public Property CargoDoContato As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.CargoDoContatoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.CargoDoContatoColumn) = value
            End Set
        End Property
        
        Public Property CEP As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.CEPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.CEPColumn) = value
            End Set
        End Property
        
        Public Property Cidade As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.CidadeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.CidadeColumn) = value
            End Set
        End Property
        
        Public Property CódigoDoCliente As String
            Get
                Return CType(Me(Me.tableClientes.CódigoDoClienteColumn),String)
            End Get
            Set
                Me(Me.tableClientes.CódigoDoClienteColumn) = value
            End Set
        End Property
        
        Public Property Endereço As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.EndereçoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.EndereçoColumn) = value
            End Set
        End Property
        
        Public Property Fax As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.FaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.FaxColumn) = value
            End Set
        End Property
        
        Public Property NomeDaEmpresa As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NomeDaEmpresaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NomeDaEmpresaColumn) = value
            End Set
        End Property
        
        Public Property NomeDoContato As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NomeDoContatoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NomeDoContatoColumn) = value
            End Set
        End Property
        
        Public Property País As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.PaísColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.PaísColumn) = value
            End Set
        End Property
        
        Public Property Região As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.RegiãoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.RegiãoColumn) = value
            End Set
        End Property
        
        Public Property Telefone As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TelefoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TelefoneColumn) = value
            End Set
        End Property
        
        Public Function IsCargoDoContatoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.CargoDoContatoColumn)
        End Function
        
        Public Sub SetCargoDoContatoNull()
            Me(Me.tableClientes.CargoDoContatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEPNull() As Boolean
            Return Me.IsNull(Me.tableClientes.CEPColumn)
        End Function
        
        Public Sub SetCEPNull()
            Me(Me.tableClientes.CEPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCidadeNull() As Boolean
            Return Me.IsNull(Me.tableClientes.CidadeColumn)
        End Function
        
        Public Sub SetCidadeNull()
            Me(Me.tableClientes.CidadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndereçoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.EndereçoColumn)
        End Function
        
        Public Sub SetEndereçoNull()
            Me(Me.tableClientes.EndereçoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableClientes.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.tableClientes.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeDaEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NomeDaEmpresaColumn)
        End Function
        
        Public Sub SetNomeDaEmpresaNull()
            Me(Me.tableClientes.NomeDaEmpresaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeDoContatoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NomeDoContatoColumn)
        End Function
        
        Public Sub SetNomeDoContatoNull()
            Me(Me.tableClientes.NomeDoContatoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaísNull() As Boolean
            Return Me.IsNull(Me.tableClientes.PaísColumn)
        End Function
        
        Public Sub SetPaísNull()
            Me(Me.tableClientes.PaísColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegiãoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.RegiãoColumn)
        End Function
        
        Public Sub SetRegiãoNull()
            Me(Me.tableClientes.RegiãoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelefoneNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TelefoneColumn)
        End Function
        
        Public Sub SetTelefoneNull()
            Me(Me.tableClientes.TelefoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClientesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClientesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
