'------------------------------------------------------------------------------
' <autogenerated>
'     This class was generated by a tool.
'     Runtime Version: 1.0.2204.21
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data
Imports System.Core

Public Class dsClientes
    Inherits System.Data.DataSet
    
    Private tableCount As Integer
    Private relationCount As Integer
    Private tableClientesTable As ClientesTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
    End Sub
    
    Public Overridable ReadOnly Property <System.ComponentModel.PersistContentsAttribute(true)> Clientes As ClientesTable
        Get
            Return Me.tableClientesTable
        End Get
    End Property
    
    Private Sub InitClass()
        Me.DataSetName = "dsClientes"
        Me.Namespace = "http://www.tempuri.org/dsClientes.xsd"
        Me.tableCount = 1
        Me.relationCount = 0
        Me.tableClientesTable = New ClientesTable("Clientes")
        Me.Tables.Add(Me.tableClientesTable)
    End Sub
    Protected Overrides Function HasSchemaChanged() As Boolean
        Return ((((Me.tableCount) <> (Me.Tables.Count))) Or (((Me.relationCount) <> (Me.Relations.Count))))
    End Function
    Public Overrides Function ShouldPersistTables() As Boolean
        Return ((Me.tableCount) <> (Me.Tables.Count))
    End Function
    Public Overrides Function ShouldPersistRelations() As Boolean
        Return ((Me.relationCount) <> (Me.Relations.Count))
    End Function
    Public Overrides Sub ResetTables()
        Dim i As Integer = 0
        Do While ((i) < (Me.Tables.Count))
            If ((Me.Tables(i)) = (Me.tableClientesTable)) Then
            Else
                Me.Tables.Remove(Me.Tables(i))
            End If
            i = ((i) + (1))
        Loop
    End Sub
    Public Overrides Sub ResetRelations()
        Dim i As Integer = 0
        Do While ((i) < (Me.Relations.Count))
            Me.Relations.Remove(Me.Relations(i))
            i = ((i) + (1))
        Loop
    End Sub
    
    
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As [object], ByVal e As ClientesRowChangeEvent)
    
    Public Class ClientesTable
        Inherits DataTable
        Implements System.Collections.ICollection
        
        Private columnCount As Integer
        Private constraintCount As Integer
        Private columnEndereco As Clientes_Endereco
        Private columnID As Clientes_ID
        Private columnNome As Clientes_Nome
        Private columnTelefone As Clientes_Telefone
        Public ClientesRowChanged As ClientesRowChangeEventHandler
        Public ClientesRowChanging As ClientesRowChangeEventHandler
        Public EnderecoColumnChanging As DataColumnChangeEventHandler
        Public IDColumnChanging As DataColumnChangeEventHandler
        Public NomeColumnChanging As DataColumnChangeEventHandler
        Public TelefoneColumnChanging As DataColumnChangeEventHandler
        
        	Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow 
		Get 
			return CType(Me.Rows(index), ClientesRow)
		End Get
	End Property
        Public Overloads Sub New(ByVal name As [string])
            MyBase.New(name)
            Me.InitClass
        End Sub
        Public Overloads Sub New()
            MyBase.New("Clientes")
            Me.InitClass
        End Sub
        
        Public Overridable ReadOnly Property Count As Integer Implements System.Collections.ICollection.Count
            Get
                Return Me.Rows.Count
            End Get
        End Property
        Public Overridable ReadOnly Property System_Collections_ICollection_IsReadOnly As Boolean Implements System.Collections.ICollection.IsReadOnly
            Get
                Return false
            End Get
        End Property
        Public Overridable ReadOnly Property System_Collections_ICollection_IsSynchronized As Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Return false
            End Get
        End Property
        Public Overridable ReadOnly Property System_Collections_ICollection_SyncRoot As [object] Implements System.Collections.ICollection.SyncRoot
            Get
                Return Me
            End Get
        End Property
        Public Overridable ReadOnly Property EnderecoColumn As Clientes_Endereco
            Get
                Return Me.columnEndereco
            End Get
        End Property
        Public Overridable ReadOnly Property IDColumn As Clientes_ID
            Get
                Return Me.columnID
            End Get
        End Property
        Public Overridable ReadOnly Property NomeColumn As Clientes_Nome
            Get
                Return Me.columnNome
            End Get
        End Property
        Public Overridable ReadOnly Property TelefoneColumn As Clientes_Telefone
            Get
                Return Me.columnTelefone
            End Get
        End Property
        
        Public Overloads Overridable Sub AddClientesRow(ByVal rowClientesRow As ClientesRow)
            Me.Rows.Add(rowClientesRow)
        End Sub
        Public Overloads Overridable Function AddClientesRow(ByVal columnEndereco As String, ByVal columnID As Integer, ByVal columnNome As String, ByVal columnTelefone As String) As ClientesRow
            Dim rowClientesRow As ClientesRow
            rowClientesRow = CType(Me.NewRow,ClientesRow)
            rowClientesRow.ItemArray = New [Object]() {columnEndereco, columnID, columnNome, columnTelefone}
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        Public Overridable Sub System_Collections_ICollection_CopyTo(ByVal array As Array, ByVal offset As Integer) Implements System.Collections.ICollection.CopyTo
            Dim i As Integer = 0
            Do While ((i) < (Me.Rows.Count))
                array.SetValue(Me.Rows(i), ((i) + (offset)))
                i = ((i) + (1))
            Loop
        End Sub
        Public Overridable Function FindByID(ByVal columnID As Integer) As ClientesRow
            Return CType(Me.Rows.Find(New [Object]() {columnID}),ClientesRow)
        End Function
        Public Overridable Function System_Collections_IEnumerable_GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.All.GetEnumerator
        End Function
        Protected Overrides Function HasSchemaChanged() As Boolean
            Return ((Me.columnCount) = (Me.Columns.Count))
        End Function
        Private Sub InitClass()
            Me.columnCount = 4
            Me.constraintCount = 1
            Me.columnEndereco = New Clientes_Endereco
            Me.Columns.Add(Me.columnEndereco)
            Me.columnID = New Clientes_ID
            Me.Columns.Add(Me.columnID)
            Me.columnNome = New Clientes_Nome
            Me.Columns.Add(Me.columnNome)
            Me.columnTelefone = New Clientes_Telefone
            Me.Columns.Add(Me.columnTelefone)
        End Sub
        Public Overridable Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            'We need to ensure that all Rows in the tabled are typed rows.
            'Table calls newRow whenever it needs to create a row.
            'So the following conditions are covered by Row newRow(Record record)
            '* Cursor calls table.addRecord(record) 
            '* table.addRow(object[] values) calls newRow(record)    
            Return New ClientesRow(builder)
        End Function
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClientesRow)
        End Function
        Protected Overrides Sub OnRemoveColumn(ByVal column As DataColumn)
            If ((((((((column) = (Me.columnEndereco))) Or (((column) = (Me.columnID))))) Or (((column) = (Me.columnNome))))) Or (((column) = (Me.columnTelefone)))) Then
                Throw New ArgumentException("Cannot remove column since it is built in to this dataSet.")
            End If
        End Sub
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChanged) Is Nothing) Then
                Me.ClientesRowChanged.Invoke(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            If (Not (Me.ClientesRowChanging) Is Nothing) Then
                Me.ClientesRowChanging.Invoke(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        Protected Overridable Sub OnEnderecoColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.EnderecoColumnChanging) Is Nothing) Then
                Me.EnderecoColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnIDColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.IDColumnChanging) Is Nothing) Then
                Me.IDColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnNomeColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.NomeColumnChanging) Is Nothing) Then
                Me.NomeColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overridable Sub OnTelefoneColumnChanging(ByVal e As DataColumnChangeEventArgs)
            If (Not (Me.TelefoneColumnChanging) Is Nothing) Then
                Me.TelefoneColumnChanging.Invoke(Me, e)
            End If
        End Sub
        Protected Overrides Sub OnColumnChanging(ByVal e As DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If ((e.Column) = (Me.columnEndereco)) Then
                Me.OnEnderecoColumnChanging(e)
            Else
                If ((e.Column) = (Me.columnID)) Then
                    Me.OnIDColumnChanging(e)
                Else
                    If ((e.Column) = (Me.columnNome)) Then
                        Me.OnNomeColumnChanging(e)
                    Else
                        If ((e.Column) = (Me.columnTelefone)) Then
                            Me.OnTelefoneColumnChanging(e)
                        End If
                    End If
                End If
            End If
        End Sub
        Public Overridable Sub RemoveClientesRow(ByVal rowClientesRow As ClientesRow)
            Me.Rows.Remove(rowClientesRow)
        End Sub
        Public Overrides Function ShouldPersistPrimaryKey() As Boolean
            Return false
        End Function
        Public Overrides Sub ResetPrimaryKey()
        End Sub
        Public Overrides Function ShouldPersistColumns() As Boolean
            Return ((Me.columnCount) <> (Me.Columns.Count))
        End Function
        Public Overrides Sub ResetColumns()
            Dim i As Integer = 0
            Do While ((i) < (Me.Columns.Count))
                If ((((Me.Columns(i)) = (Me.columnTelefone))) Or (((((Me.Columns(i)) = (Me.columnNome))) Or (((((Me.Columns(i)) = (Me.columnID))) Or (((Me.Columns(i)) = (Me.columnEndereco)))))))) Then
                Else
                    Me.Columns.Remove(Me.Columns(i))
                End If
                i = ((i) + (1))
            Loop
        End Sub
        Public Overrides Function ShouldPersistConstraints() As Boolean
            Return ((Me.constraintCount) <> (Me.Constraints.Count))
        End Function
        Public Overrides Sub ResetConstraints()
            Dim i As Integer = Me.constraintCount
            Do While ((i) < (Me.Constraints.Count))
                Me.Constraints.Remove(Me.Constraints(i))
                i = ((i) + (1))
            Loop
        End Sub
        
    End Class
    
    Public Class Clientes_Endereco
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("Endereco", GetType(System.String))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
        End Sub
        
    End Class
    
    Public Class Clientes_ID
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("ID", GetType(System.Int32))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
            Me.Unique = true
        End Sub
        
    End Class
    
    Public Class Clientes_Nome
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("Nome", GetType(System.String))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
        End Sub
        
    End Class
    
    Public Class Clientes_Telefone
        Inherits System.Data.DataColumn
        
        Public Sub New()
            MyBase.New("Telefone", GetType(System.String))
            Me.InitClass
        End Sub
        
        Public Overridable Sub InitClass()
        End Sub
        
    End Class
    
    Public Class ClientesRow
        Inherits DataRow
        
        Private tableClientesTable As ClientesTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientesTable = CType(Me.Table,ClientesTable)
        End Sub
        
        Public Overridable Property Endereco As String
            Get
                Return CType(Me(Me.tableClientesTable.EnderecoColumn),String)
            End Get
            Set
                Me(Me.tableClientesTable.EnderecoColumn) = value
            End Set
        End Property
        Public Overridable Property EnderecoIsNull As Boolean
            Get
                Return Me.IsNull(Me.tableClientesTable.EnderecoColumn)
            End Get
            Set
                If ((value) = (true)) Then
                    Me(Me.tableClientesTable.EnderecoColumn) = [Convert].DBNull
                Else
                    Throw New ArgumentException("Can only set this property to true.")
                End If
            End Set
        End Property
        Public Overridable Property ID As Integer
            Get
                Return CType(Me(Me.tableClientesTable.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableClientesTable.IDColumn) = value
            End Set
        End Property
        Public Overridable Property IDIsNull As Boolean
            Get
                Return Me.IsNull(Me.tableClientesTable.IDColumn)
            End Get
            Set
                If ((value) = (true)) Then
                    Me(Me.tableClientesTable.IDColumn) = [Convert].DBNull
                Else
                    Throw New ArgumentException("Can only set this property to true.")
                End If
            End Set
        End Property
        Public Overridable Property Nome As String
            Get
                Return CType(Me(Me.tableClientesTable.NomeColumn),String)
            End Get
            Set
                Me(Me.tableClientesTable.NomeColumn) = value
            End Set
        End Property
        Public Overridable Property NomeIsNull As Boolean
            Get
                Return Me.IsNull(Me.tableClientesTable.NomeColumn)
            End Get
            Set
                If ((value) = (true)) Then
                    Me(Me.tableClientesTable.NomeColumn) = [Convert].DBNull
                Else
                    Throw New ArgumentException("Can only set this property to true.")
                End If
            End Set
        End Property
        Public Overridable Property Telefone As String
            Get
                Return CType(Me(Me.tableClientesTable.TelefoneColumn),String)
            End Get
            Set
                Me(Me.tableClientesTable.TelefoneColumn) = value
            End Set
        End Property
        Public Overridable Property TelefoneIsNull As Boolean
            Get
                Return Me.IsNull(Me.tableClientesTable.TelefoneColumn)
            End Get
            Set
                If ((value) = (true)) Then
                    Me(Me.tableClientesTable.TelefoneColumn) = [Convert].DBNull
                Else
                    Throw New ArgumentException("Can only set this property to true.")
                End If
            End Set
        End Property
        
    End Class
    
    Public Class ClientesRowChangeEvent
        Inherits EventArgs
        
        Private rowClientesRow As ClientesRow
        Private actionValue As System.Data.DataRowAction
        
        Public Sub New(ByVal rowClientesRowArg As ClientesRow, ByVal actionArg As DataRowAction)
            MyBase.New
            Me.rowClientesRow = rowClientesRowArg
            Me.actionValue = actionArg
        End Sub
        
        Public Overridable ReadOnly Property ClientesRow As ClientesRow
            Get
                Return Me.rowClientesRow
            End Get
        End Property
        Public Overridable ReadOnly Property Action As DataRowAction
            Get
                Return Me.actionValue
            End Get
        End Property
        
    End Class
    
End Class
